/* DO NOT EDIT THIS FILE! It is automatically generated by Grunt. */
(function() {
    'use strict';

    app.View.NoteList = Marionette.CompositeView.extend({

        el: '#notes-wrapper',
        template: '#tmpl_note_list',

        childView: app.View.Note,
        childViewContainer: 'div',

        initialize: function() {
            var self = this;

            this.render();

            $(window).on('resize', this.updateShapeShift);

            $(document).dblclick(function() {
                self.new();
            });
        },

        onRender: function() {
            console.log('onRender');

            this.$el.find('> div').addClass('wrapper');
        },

        collectionEvents: {
            'new': 'initShapeShift',
            'remove': 'updateShapeShift',
            'fetch': 'afterFetch'
        },

        afterFetch: function() {
            var self = this;

            console.log('afterFetch');

            self.initShapeShift();
        },

        events: {
            'click .new': 'new'
        },

        initShapeShift: function() {
            var self = this;

            console.log('initShapeShift');

            window.shapeshift = $('.wrapper');
            window.shapeshift.shapeshift({
                gutterX: 10,
                gutterY: 10,
                paddingX: 0,
                paddingY: 20
            });
        },

        updateShapeShift: function() {
            if (window.shapeshift) {
                window.shapeshift.trigger('ss-rearrange');
            }
        },

        new: function() {
            this.collection.create({
                title: '',
                content: '',
                order: 9999,
                createdDate: new Date().getTime(),
                isEditing: false,
                isArchived: false
            });

            console.log('new');

            this.collection.trigger('new');
        }

    });

})();

(function() {
    'use strict';

    app.View.Note = Marionette.ItemView.extend({

        tagName: 'div',
        template: '#tmpl_note',

        initialize: function() {
            var self = this;

            //this.on('render', function() {
            window.setTimeout(function() {
                self.afterRender();
            }, 1);
            //});
        },

        afterRender: function() {
            var self = this;

            this.$el.find('textarea').autosize({
                append: '',
                callback: this.updateLayout
            });

            this.$el.on('input', function() {
                waitForFinalEvent(function() {
                    self.save();
                }, 300, 'input');
            });

            window.shapeshift.on('ss-rearranged', function() {
                console.log('save');
                self.save();
                waitForFinalEvent(function() {
                    console.log('save:updateLayout');
                    self.updateLayout();
                }, 300, 'ss-rearranged');
            });
        },

        onRender: function() {
            this.$el.addClass('note');
        },

        events: {
            'click .delete': 'delete'
        },

        updateLayout: function() {
            if (window.shapeshift) {
                window.shapeshift.trigger('ss-rearrange');
            }
        },

        save: function() {
            var title = this.$('.title').val() || '...',
                content = this.$('.content').val() || '...',
                order = this.$el.index();

            this.model.save({
                title: title,
                content: content,
                order: order,
                isEditing: false
            });
        },

        delete: function() {
            this.model.destroy();
        }

    });

})();
